// <auto-generated />
using System;
using DiplomaticMailBot.Infra.Database.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DiplomaticMailBot.Infra.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250301015311_AddChatSlotTemplate")]
    partial class AddChatSlotTemplate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.DiplomaticRelation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SourceChatId")
                        .HasColumnType("integer");

                    b.Property<int>("TargetChatId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("TargetChatId");

                    b.HasIndex(new[] { "SourceChatId", "TargetChatId" }, "DiplomaticRelation_Unique_IX")
                        .IsUnique();

                    b.ToTable("DiplomaticRelations");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.MessageCandidate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint");

                    b.Property<string>("AuthorName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<string>("Preview")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<int>("SlotInstanceId")
                        .HasColumnType("integer");

                    b.Property<long>("SubmitterId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SlotInstanceId");

                    b.HasIndex(new[] { "MessageId", "SlotInstanceId" }, "MessageCandidate_Unique_IX")
                        .IsUnique();

                    b.ToTable("MessageCandidates");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.MessageOutbox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Attempts")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageCandidateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SlotInstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<string>("StatusDetails")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.HasKey("Id");

                    b.HasIndex("MessageCandidateId");

                    b.HasIndex(new[] { "SlotInstanceId" }, "MessageOutbox_SlotInstanceId_IX")
                        .IsUnique();

                    b.HasIndex(new[] { "Status" }, "MessageOutbox_Status_IX");

                    b.ToTable("MessageOutbox");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.RegisteredChat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ChatAlias")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<long>("ChatId")
                        .HasColumnType("bigint");

                    b.Property<string>("ChatTitle")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int?>("SlotTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("IsDeleted");

                    b.HasIndex("SlotTemplateId");

                    b.HasIndex(new[] { "ChatAlias" }, "RegisteredChat_ChatAlias_Unique_IX")
                        .IsUnique();

                    b.HasIndex(new[] { "ChatId" }, "RegisteredChat_ChatId_Unique_IX")
                        .IsUnique();

                    b.ToTable("RegisteredChats");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotInstance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.Property<int>("SourceChatId")
                        .HasColumnType("integer")
                        .HasColumnName("SourceChatId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<int>("TargetChatId")
                        .HasColumnType("integer")
                        .HasColumnName("TargetChatId");

                    b.Property<int>("TemplateId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("SourceChatId");

                    b.HasIndex("Status");

                    b.HasIndex("TargetChatId");

                    b.HasIndex("TemplateId");

                    b.HasIndex(new[] { "Date", "TemplateId", "SourceChatId", "TargetChatId" }, "SlotInstance_Unique_IX")
                        .IsUnique();

                    b.ToTable("SlotInstances");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotPoll", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("ClosedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("MessageId")
                        .HasColumnType("integer");

                    b.Property<int>("SlotInstanceId")
                        .HasColumnType("integer");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "SlotInstanceId" }, "SlotPoll_SlotInstanceId_Unique_IX")
                        .IsUnique();

                    b.ToTable("SlotPolls");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Number")
                        .HasColumnType("integer");

                    b.Property<TimeOnly>("VoteEndAt")
                        .HasColumnType("time without time zone");

                    b.Property<TimeOnly>("VoteStartAt")
                        .HasColumnType("time without time zone");

                    b.HasKey("Id");

                    b.ToTable("SlotTemplates");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.DiplomaticRelation", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.RegisteredChat", "SourceChat")
                        .WithMany("OutgoingDiplomaticRelations")
                        .HasForeignKey("SourceChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaticMailBot.Infra.Entities.RegisteredChat", "TargetChat")
                        .WithMany("IncomingDiplomaticRelations")
                        .HasForeignKey("TargetChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceChat");

                    b.Navigation("TargetChat");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.MessageCandidate", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.SlotInstance", "SlotInstance")
                        .WithMany("MessageCandidates")
                        .HasForeignKey("SlotInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotInstance");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.MessageOutbox", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.MessageCandidate", "MessageCandidate")
                        .WithMany()
                        .HasForeignKey("MessageCandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaticMailBot.Infra.Entities.SlotInstance", "SlotInstance")
                        .WithMany()
                        .HasForeignKey("SlotInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MessageCandidate");

                    b.Navigation("SlotInstance");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.RegisteredChat", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.SlotTemplate", "SlotTemplate")
                        .WithMany("Chats")
                        .HasForeignKey("SlotTemplateId");

                    b.Navigation("SlotTemplate");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotInstance", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.RegisteredChat", "SourceChat")
                        .WithMany("SlotInstancesSource")
                        .HasForeignKey("SourceChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaticMailBot.Infra.Entities.RegisteredChat", "TargetChat")
                        .WithMany("SlotInstancesTarget")
                        .HasForeignKey("TargetChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DiplomaticMailBot.Infra.Entities.SlotTemplate", "Template")
                        .WithMany("SlotInstances")
                        .HasForeignKey("TemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SourceChat");

                    b.Navigation("TargetChat");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotPoll", b =>
                {
                    b.HasOne("DiplomaticMailBot.Infra.Entities.SlotInstance", "SlotInstance")
                        .WithMany()
                        .HasForeignKey("SlotInstanceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SlotInstance");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.RegisteredChat", b =>
                {
                    b.Navigation("IncomingDiplomaticRelations");

                    b.Navigation("OutgoingDiplomaticRelations");

                    b.Navigation("SlotInstancesSource");

                    b.Navigation("SlotInstancesTarget");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotInstance", b =>
                {
                    b.Navigation("MessageCandidates");
                });

            modelBuilder.Entity("DiplomaticMailBot.Infra.Entities.SlotTemplate", b =>
                {
                    b.Navigation("Chats");

                    b.Navigation("SlotInstances");
                });
#pragma warning restore 612, 618
        }
    }
}
